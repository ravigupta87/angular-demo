{
  "_args": [
    [
      "compression@https://registry.npmjs.org/compression/-/compression-1.1.2.tgz",
      "/Users/ravikumar/projects/angular-demo/node_modules/karma/node_modules/connect"
    ]
  ],
  "_from": "https://registry.npmjs.org/compression/-/compression-1.1.2.tgz",
  "_id": "compression@1.1.2",
  "_inCache": true,
  "_location": "/karma/connect/compression",
  "_phantomChildren": {},
  "_requested": {
    "name": "compression",
    "raw": "compression@https://registry.npmjs.org/compression/-/compression-1.1.2.tgz",
    "rawSpec": "https://registry.npmjs.org/compression/-/compression-1.1.2.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/compression/-/compression-1.1.2.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/karma/connect"
  ],
  "_resolved": "https://registry.npmjs.org/compression/-/compression-1.1.2.tgz",
  "_shasum": "f93fb7fcdb3573ec4c7d5398984caae230e2a8d7",
  "_shrinkwrap": null,
  "_spec": "compression@https://registry.npmjs.org/compression/-/compression-1.1.2.tgz",
  "_where": "/Users/ravikumar/projects/angular-demo/node_modules/karma/node_modules/connect",
  "author": {
    "email": "me@jongleberry.com",
    "name": "Jonathan Ong",
    "url": "http://jongleberry.com"
  },
  "bugs": {
    "url": "https://github.com/expressjs/compression/issues"
  },
  "contributors": [
    {
      "name": "Douglas Christopher Wilson",
      "email": "doug@somethingdoug.com"
    }
  ],
  "dependencies": {
    "accepts": "~1.1.2",
    "bytes": "1.0.0",
    "compressible": "~2.0.1",
    "debug": "~2.0.0",
    "on-headers": "~1.0.0",
    "vary": "~1.0.0"
  },
  "description": "Compression middleware for connect and node.js",
  "devDependencies": {
    "istanbul": "0.3.2",
    "mocha": "~1.21.5",
    "should": "~4.0.1",
    "supertest": "~0.14.0"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "files": [
    "HISTORY.md",
    "LICENSE",
    "index.js"
  ],
  "homepage": "https://github.com/expressjs/compression#readme",
  "license": "MIT",
  "name": "compression",
  "optionalDependencies": {},
  "readme": "# compression\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n[![Gratipay][gratipay-image]][gratipay-url]\n\nNode.js compression middleware.\n\n## Install\n\n```bash\n$ npm install compression\n```\n\n## API\n\n```js\nvar compression = require('compression')\n```\n\n### compression(options)\n\nReturns the compression middleware using the given `options`.\n\n```js\napp.use(compression({\n  threshold: 512\n}))\n```\n\n#### Options\n\n- `threshold` `<1kb>` - response is only compressed if the byte size is at or above this threshold.\n- `filter` - a filtering callback function. Uses [Compressible](https://github.com/expressjs/compressible) by default.\n\nIn addition to these, [zlib](http://nodejs.org/api/zlib.html) options may be passed in to the options object.\n\n### res.flush\n\nThis module adds a `res.flush()` method to force the partially-compressed\nresponse to be flushed to the client.\n\n## Examples\n\n### express/connect\n\nWhen using this module with express or connect, simply `app.use` the module as\nhigh as you like. Requests that pass through the middleware will be compressed.\n\n```js\nvar compression = require('compression')\nvar express = require('express')\n\nvar app = express()\n\n// compress all requests\napp.use(compression())\n\n// add alll routes\n```\n\n### Server-Sent Events\n\nBecause of the nature of compression this module does not work out of the box\nwith server-sent events. To compress content, a window of the output needs to\nbe buffered up in order to get good compression. Typically when using server-sent\nevents, there are certain block of data that need to reach the client.\n\nYou can achieve this by calling `res.flush()` when you need the data written to\nactually make it to the client.\n\n```js\nvar compression = require('compression')\nvar express     = require('express')\n\nvar app = express()\n\n// compress responses\napp.use(compression())\n\n// server-sent event stream\napp.get('/events', function (req, res) {\n  res.setHeader('Content-Type', 'text/event-stream')\n  res.setHeader('Cache-Control', 'no-cache')\n\n  // send a ping approx eveny 2 seconds\n  var timer = setInterval(function () {\n    res.write('data: ping\\n\\n')\n\n    // !!! this is the important part\n    res.flush()\n  }, 2000)\n\n  res.on('close', function () {\n    clearInterval(timer)\n  })\n})\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/compression.svg?style=flat\n[npm-url]: https://npmjs.org/package/compression\n[travis-image]: https://img.shields.io/travis/expressjs/compression.svg?style=flat\n[travis-url]: https://travis-ci.org/expressjs/compression\n[coveralls-image]: https://img.shields.io/coveralls/expressjs/compression.svg?style=flat\n[coveralls-url]: https://coveralls.io/r/expressjs/compression?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/compression.svg?style=flat\n[downloads-url]: https://npmjs.org/package/compression\n[gratipay-image]: https://img.shields.io/gratipay/dougwilson.svg?style=flat\n[gratipay-url]: https://www.gratipay.com/dougwilson/\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/expressjs/compression.git"
  },
  "scripts": {
    "test": "mocha --check-leaks --reporter spec --bail",
    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --check-leaks --reporter dot",
    "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --check-leaks --reporter spec"
  },
  "version": "1.1.2"
}
