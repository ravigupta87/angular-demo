{
  "_args": [
    [
      "rimraf@https://registry.npmjs.org/rimraf/-/rimraf-2.3.2.tgz",
      "/Users/ravikumar/projects/angular-demo/node_modules/browserstacktunnel-wrapper/node_modules/unzip/node_modules/fstream"
    ]
  ],
  "_from": "https://registry.npmjs.org/rimraf/-/rimraf-2.3.2.tgz",
  "_id": "rimraf@2.3.2",
  "_inCache": true,
  "_location": "/browserstacktunnel-wrapper/unzip/fstream/rimraf",
  "_phantomChildren": {
    "inherits": "2.0.1"
  },
  "_requested": {
    "name": "rimraf",
    "raw": "rimraf@https://registry.npmjs.org/rimraf/-/rimraf-2.3.2.tgz",
    "rawSpec": "https://registry.npmjs.org/rimraf/-/rimraf-2.3.2.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/rimraf/-/rimraf-2.3.2.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/browserstacktunnel-wrapper/unzip/fstream"
  ],
  "_resolved": "https://registry.npmjs.org/rimraf/-/rimraf-2.3.2.tgz",
  "_shasum": "7304bd9275c401b89103b106b3531c1ef0c02fe9",
  "_shrinkwrap": null,
  "_spec": "rimraf@https://registry.npmjs.org/rimraf/-/rimraf-2.3.2.tgz",
  "_where": "/Users/ravikumar/projects/angular-demo/node_modules/browserstacktunnel-wrapper/node_modules/unzip/node_modules/fstream",
  "author": {
    "email": "i@izs.me",
    "name": "Isaac Z. Schlueter",
    "url": "http://blog.izs.me/"
  },
  "bin": {
    "rimraf": "./bin.js"
  },
  "bugs": {
    "url": "https://github.com/isaacs/rimraf/issues"
  },
  "dependencies": {
    "glob": "^4.4.2"
  },
  "description": "A deep deletion module for node (like `rm -rf`)",
  "devDependencies": {},
  "files": [
    "LICENSE",
    "README.md",
    "bin.js",
    "rimraf.js"
  ],
  "homepage": "https://github.com/isaacs/rimraf#readme",
  "license": {
    "type": "MIT",
    "url": "https://github.com/isaacs/rimraf/raw/master/LICENSE"
  },
  "main": "rimraf.js",
  "name": "rimraf",
  "optionalDependencies": {},
  "readme": "The [UNIX command](http://en.wikipedia.org/wiki/Rm_(Unix)) `rm -rf` for node.  \n\nInstall with `npm install rimraf`, or just drop rimraf.js somewhere.\n\n## API\n\n`rimraf(f, callback)`\n\nThe callback will be called with an error if there is one.  Certain\nerrors are handled for you:\n\n* Windows: `EBUSY` and `ENOTEMPTY` - rimraf will back off a maximum of\n  `opts.maxBusyTries` times before giving up, adding 100ms of wait\n  between each attempt.  The default `maxBusyTries` is 3.\n* `ENOENT` - If the file doesn't exist, rimraf will return\n  successfully, since your desired outcome is already the case.\n* `EMFILE` - Since `readdir` requires opening a file descriptor, it's\n  possible to hit `EMFILE` if too many file descriptors are in use.\n  In the sync case, there's nothing to be done for this.  But in the\n  async case, rimraf will gradually back off with timeouts up to\n  `opts.emfileWait` ms, which defaults to 1000.\n\n## rimraf.sync\n\nIt can remove stuff synchronously, too.  But that's not so good.  Use\nthe async API.  It's better.\n\n## CLI\n\nIf installed with `npm install rimraf -g` it can be used as a global\ncommand `rimraf <path>` which is useful for cross platform support.\n\n## mkdirp\n\nIf you need to create a directory recursively, check out\n[mkdirp](https://github.com/substack/node-mkdirp).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/isaacs/rimraf.git"
  },
  "scripts": {
    "test": "cd test && bash run.sh"
  },
  "version": "2.3.2"
}
