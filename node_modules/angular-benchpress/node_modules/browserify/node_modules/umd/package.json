{
  "_args": [
    [
      "umd@https://registry.npmjs.org/umd/-/umd-2.1.0.tgz",
      "/Users/ravikumar/projects/angular-demo/node_modules/angular-benchpress/node_modules/browserify"
    ]
  ],
  "_from": "https://registry.npmjs.org/umd/-/umd-2.1.0.tgz",
  "_id": "umd@2.1.0",
  "_inCache": true,
  "_location": "/angular-benchpress/browserify/umd",
  "_phantomChildren": {},
  "_requested": {
    "name": "umd",
    "raw": "umd@https://registry.npmjs.org/umd/-/umd-2.1.0.tgz",
    "rawSpec": "https://registry.npmjs.org/umd/-/umd-2.1.0.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/umd/-/umd-2.1.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/angular-benchpress/browserify",
    "/angular-benchpress/browserify/browser-pack"
  ],
  "_resolved": "https://registry.npmjs.org/umd/-/umd-2.1.0.tgz",
  "_shasum": "4a6307b762f17f02d201b5fa154e673396c263cf",
  "_shrinkwrap": null,
  "_spec": "umd@https://registry.npmjs.org/umd/-/umd-2.1.0.tgz",
  "_where": "/Users/ravikumar/projects/angular-demo/node_modules/angular-benchpress/node_modules/browserify",
  "author": {
    "name": "ForbesLindesay"
  },
  "bin": {
    "umd": "./bin/cli.js"
  },
  "bugs": {
    "url": "https://github.com/ForbesLindesay/umd/issues"
  },
  "dependencies": {
    "rfile": "~1.0.0",
    "ruglify": "~1.0.0",
    "through": "~2.3.4",
    "uglify-js": "~2.4.0"
  },
  "description": "Universal Module Definition for use in automated build systems",
  "devDependencies": {
    "linify": "~1.0.1",
    "mocha": "*"
  },
  "homepage": "https://github.com/ForbesLindesay/umd#readme",
  "license": "MIT",
  "name": "umd",
  "optionalDependencies": {},
  "readme": "# umd\n<img src=\"http://i.imgur.com/ypw29XY.png\" align=\"right\"/>\n\nUniversal Module Definition for use in automated build systems\n\n - simple synchronous wrapping of a string\n - optional wrapping of a \"stream\" with genuine streaming\n - `return` style module support\n - CommonJS support\n - prevents internal UMDs from conflicting\n\n[![Build Status](https://travis-ci.org/ForbesLindesay/umd.png?branch=master)](https://travis-ci.org/ForbesLindesay/umd)\n[![Dependency Status](https://gemnasium.com/ForbesLindesay/umd.png)](https://gemnasium.com/ForbesLindesay/umd)\n[![NPM version](https://badge.fury.io/js/umd.png)](http://badge.fury.io/js/umd)\n\n## Source Format\n\nIn order for the UMD wrapper to work the source code for your module should `return` the export, e.g.\n\n```javascript\nfunction method() {\n  //code\n}\nmethod.helper = function () {\n  //code\n}\nreturn method;\n```\n\nFor examples, see the examples directory.  The CommonJS module format is also supported by passing true as the second argument to methods.\n\n## API\n\n### umd(name, [commonJS = false], [source])\n\n  The `name` should the the name of the module.  Use a string like name, all lower case with hyphens instead of spaces.\n\n  If CommonJS is `true` then it will accept CommonJS source instead of source code which `return`s the module.\n\n  If `source` is provided and is a string, then it is wrapped in umd and returned as a string.  If it is not provided, a duplex stream is returned which wraps the modules (see examples/build.js).\n\n  Both commonJS and source are optional and can be provided in either order.\n\n### umd.prelude(module, [commonJS = false])\n\n  return the text which will be inserted before a module.\n\n### umd.postlude(module, [commonJS = false])\n\n  return the text which will be inserted after a module.\n\n## Command Line\n\n```\nUsage: umd <name> <source> <destination> [options]\n\nPipe Usage: umd <name> [options] < source > destination\n\nOptions:\n\n -h --help     Display usage information\n -c --commonJS Use CommonJS module format\n ```\n\n## License\n\n  MIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ForbesLindesay/umd.git"
  },
  "scripts": {
    "prepublish": "linify transform bin",
    "test": "mocha -R spec"
  },
  "version": "2.1.0"
}
